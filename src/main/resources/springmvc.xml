<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	<!-- 一 把controller交给springmvc管理 -->
	<context:component-scan base-package="com.moudao"></context:component-scan>

	<!-- validated 校验配置start -->
	<!--<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" >-->
		<!-- 提供检验机制的类： 此处用的而是Hibernate校验器，但是跟Hibernate没有关系 -->
		<!--<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />-->
		<!-- 指定校验的使用的资源文件, 如果不需要额外的错误配置文件，就不用配置该属性，
         在配置文件中配置k-v的错误提示信息，如果不指定则使用默认配置：classpath下的ValidationMessages.properties -->
		<!--<property name="validationMessageSource" ref="messoreSources" />-->
	<!--</bean>-->
	<!--<span style="color:#ff0000;"> 额外错误信息文件配置</span> -->
	<!--<bean id="messoreSources" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">-->
		<!--&lt;!&ndash;         错误信息资源文件， 不需要写后缀， 默认后缀为.properties &ndash;&gt;-->
		<!--<property name="basenames">-->
			<!--<list>-->
				<!--<value>classpath:testErrMessages</value>-->
			<!--</list>-->
		<!--</property>-->
		<!--&lt;!&ndash;         错误信息文件编码方式 &ndash;&gt;-->
		<!--<property name="fileEncodings" value="utf-8" />-->
		<!--&lt;!&ndash;         错误信息文件缓存时间 &ndash;&gt;-->
		<!--<property name="cacheSeconds" value="120" />-->
	<!--</bean>-->
	<!-- validated 校验配置end  -->

	<!-- 配置两种时间参数格式的接受转换器 -->
	<bean id = "dateConvert" class="com.moudao.convert.DateConvert"></bean>
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<ref bean="dateConvert"/>
			</set>
		</property>
	</bean>

	<!-- 注解驱动 -->
	<!--<mvc:annotation-driven validator="validator">-->
	<mvc:annotation-driven conversion-service="conversionService">
		<mvc:message-converters register-defaults="true">
			<!-- 配置默认使用fastjson进行格式化json -->
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="fastJsonConfig" ref="fastJsonConfig"></property>
				<property name="defaultCharset" ref="charset"></property>
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json</value>
						<value>application/xml;charset=UTF-8</value>
					</list>
				</property>
				<property name="features">
					<list>
						<!-- 默认的意思就是不配置这个属性，配置了就不是默认了 -->
						<!-- 是否输出值为null的字段 ，默认是false-->
						<value>WriteMapNullValue</value>
						<value>WriteNullNumberAsZero</value>
						<value>WriteNullListAsEmpty</value>
						<value>WriteNullStringAsEmpty</value>
						<value>WriteNullBooleanAsFalse</value>
						<!-- 日期转换的默认格式化器 -->
						<value>WriteDateUseDateFormat</value>
					</list>
				</property>
			</bean>
			<!-- 消息转换器，控制返回的消息编码 -->
			<!--<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg ref="charset"></constructor-arg>
			</bean>-->
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 引入静态资源 -->
	<mvc:default-servlet-handler/>
	<!-- 配置使用fastjson -->
	<bean id="fastJsonConfig" class="com.alibaba.fastjson.support.config.FastJsonConfig">
		<property name="serializerFeatures" ref="prettyFormat"></property>
	</bean>
	<!-- 注入fastjson需要的枚举,或者直接在fastjson的消息转换器中的features属性中进行设置 -->
	<bean id="prettyFormat" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField" value="com.alibaba.fastjson.serializer.SerializerFeature.PrettyFormat" />
	</bean>
	<!-- 定义fastjson需要的字符集 -->
	<bean id="charset" class="java.nio.charset.Charset" factory-method="forName">
		<constructor-arg value="utf-8"/>
	</bean>

	<!-- 配置视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 配置上传文件解析器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置默认编码为UTF-8 -->
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- 指定文件上传大小 -->
		<property name="maxUploadSize" value="10240000"></property>
	</bean>

	<!-- 配置全局异常解析器 -->
	<bean class="com.moudao.exception.GlobalExceptionResolver"></bean>

</beans>
